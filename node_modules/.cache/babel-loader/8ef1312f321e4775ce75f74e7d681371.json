{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lishi\\\\my-app\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { useState } from \"react\";\nimport { Geographies, Geography, Graticule, Sphere, ComposableMap } from \"react-simple-maps\";\nimport { Button, InputNumber, Progress } from \"antd\";\nconst progressStatus = {\n  Idle: 'Idle',\n  Tracking: 'Tracking...',\n  Complete: 'Complete'\n};\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst WorldMap = ({\n  selectedSatellites,\n  disabled,\n  onTracking\n}) => {\n  const [duration, setDuration] = useState(1);\n  const [progressPercentage, setProgressPercentage] = useState(0);\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\n  const [timerId, setTimerId] = useState(undefined);\n\n  const abortOnClick = () => {\n    if (timerId) {\n      clearInterval(timerId);\n      setProgressPercentage(0);\n      setProgressText(progressStatus.Idle);\n      onTracking(false);\n      setTimerId(undefined);\n    }\n  };\n\n  const startTracking = () => {\n    let curMin = 0;\n    return setInterval(() => {\n      setProgressPercentage(curMin / duration * 100);\n\n      if (curMin === duration) {\n        setProgressText(progressStatus.Complete);\n        onTracking(false);\n        clearInterval(timerId);\n      }\n\n      curMin++;\n    }, 1000);\n  };\n\n  const trackOnClick = () => {\n    setProgressText(progressStatus.Idle);\n    setProgressText(`Tracking for ${duration} minutes`);\n    setProgressPercentage(0);\n    onTracking(true);\n    setTimerId(startTracking());\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"track-info-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: trackOnClick,\n    disabled: selectedSatellites.length === 0 || disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Track selected satellites\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: \"10px\",\n      marginRight: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"for\"), /*#__PURE__*/React.createElement(InputNumber, {\n    min: 1,\n    max: 50,\n    defaultValue: 1,\n    onChange: value => setDuration(value),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: \"10px\",\n      marginRight: \"30px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"minutes\"), /*#__PURE__*/React.createElement(Progress, {\n    style: {\n      width: \"500px\",\n      marginRight: \"150px\"\n    },\n    percent: progressPercentage,\n    format: () => progressText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), timerId && /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: abortOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"Abort\")), /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: {\n      scale: 137\n    },\n    style: {\n      height: \"700px\",\n      marginLeft: \"100px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Graticule, {\n    stroke: \"#DDD\",\n    strokeWidth: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Sphere, {\n    stroke: \"#DDD\",\n    strokeWidth: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: \"#DDD\",\n    stroke: \"#FFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["C:/Users/lishi/my-app/src/components/WorldMap.js"],"names":["React","useState","Geographies","Geography","Graticule","Sphere","ComposableMap","Button","InputNumber","Progress","progressStatus","Idle","Tracking","Complete","geoUrl","WorldMap","selectedSatellites","disabled","onTracking","duration","setDuration","progressPercentage","setProgressPercentage","progressText","setProgressText","timerId","setTimerId","undefined","abortOnClick","clearInterval","startTracking","curMin","setInterval","trackOnClick","length","marginLeft","marginRight","value","width","scale","height","geographies","map","geo","rsmKey"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  Sphere,\r\n  ComposableMap,\r\n} from \"react-simple-maps\";\r\nimport { Button, InputNumber, Progress } from \"antd\";\r\n\r\nconst progressStatus = {\r\n  Idle: 'Idle',\r\n  Tracking: 'Tracking...',\r\n  Complete: 'Complete'\r\n}\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst WorldMap = ({\r\n  selectedSatellites,\r\n  disabled,\r\n  onTracking\r\n}) => {\r\n  const [duration, setDuration] = useState(1);\r\n  const [progressPercentage, setProgressPercentage] = useState(0);\r\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\r\n  const [timerId, setTimerId] = useState(undefined);\r\n\r\n  const abortOnClick = () => {\r\n    if (timerId) {\r\n      clearInterval(timerId);\r\n      setProgressPercentage(0);\r\n      setProgressText(progressStatus.Idle);\r\n      onTracking(false);\r\n      setTimerId(undefined);\r\n    }\r\n  }\r\n\r\n  const startTracking = () => {\r\n    let curMin = 0;\r\n    return setInterval(() => {\r\n      setProgressPercentage((curMin / duration) * 100);\r\n\r\n      if (curMin === duration) {\r\n        setProgressText(progressStatus.Complete);\r\n        onTracking(false);\r\n        clearInterval(timerId);\r\n      }\r\n\r\n      curMin++;\r\n    }, 1000);\r\n  }\r\n\r\n  const trackOnClick = () => {\r\n    setProgressText(progressStatus.Idle);\r\n    setProgressText(`Tracking for ${duration} minutes`);\r\n    setProgressPercentage(0);\r\n    onTracking(true);\r\n\r\n    setTimerId(startTracking());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"track-info-panel\">\r\n        <Button \r\n          type=\"primary\"\r\n          onClick={trackOnClick}\r\n          disabled={selectedSatellites.length === 0 || disabled}\r\n        >\r\n          Track selected satellites\r\n        </Button>\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>for</span>\r\n        <InputNumber \r\n          min={1}\r\n          max={50}\r\n          defaultValue={1}\r\n          onChange={(value) => setDuration(value)}\r\n          disabled={disabled}\r\n        />\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"30px\" }}>minutes</span>\r\n        <Progress \r\n          style={{ width: \"500px\", marginRight: \"150px\" }}\r\n          percent={progressPercentage} \r\n          format={() => progressText} \r\n        />\r\n        {timerId &&\r\n          <Button \r\n            type=\"primary\"\r\n            onClick={abortOnClick}\r\n          >\r\n            Abort\r\n          </Button>\r\n        }\r\n      </div>\r\n      <ComposableMap projectionConfig={{ scale: 137 }} style={{ height: \"700px\", marginLeft: \"100px\" }}>\r\n        <Graticule stroke=\"#DDD\" strokeWidth={0.5} />\r\n        <Sphere stroke=\"#DDD\" strokeWidth={0.5} />\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                fill=\"#DDD\"\r\n                stroke=\"#FFF\"\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n      </ComposableMap>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorldMap;\r\n"]},"metadata":{},"sourceType":"module"}