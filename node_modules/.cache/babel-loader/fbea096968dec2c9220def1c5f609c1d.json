{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\lishi\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Geographies,Geography,Graticule,Sphere,ComposableMap,Marker}from\"react-simple-maps\";import{Button,InputNumber,Progress}from\"antd\";import{NY20_API_KEY,NY20_BASE_URL}from\"../constants\";export var POSITION_API_BASE_URL=\"\".concat(NY20_BASE_URL,\"/positions\");var progressStatus={Idle:'Idle',Tracking:'Tracking...',Complete:'Complete'};var geoUrl=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";var WorldMap=function WorldMap(_ref){var selectedSatellites=_ref.selectedSatellites,disabled=_ref.disabled,onTracking=_ref.onTracking,observerInfo=_ref.observerInfo;var _useState=useState(1),_useState2=_slicedToArray(_useState,2),duration=_useState2[0],setDuration=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),progressPercentage=_useState4[0],setProgressPercentage=_useState4[1];var _useState5=useState(progressStatus.Idle),_useState6=_slicedToArray(_useState5,2),progressText=_useState6[0],setProgressText=_useState6[1];var _useState7=useState(undefined),_useState8=_slicedToArray(_useState7,2),timerId=_useState8[0],setTimerId=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),markersInfo=_useState10[0],setMarkersInfo=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),currentTimestamp=_useState12[0],setCurrentTimestamp=_useState12[1];var abortOnClick=function abortOnClick(){if(timerId){clearInterval(timerId);setProgressPercentage(0);setProgressText(progressStatus.Idle);onTracking(false);setTimerId(undefined);}};var fetchPositions=function fetchPositions(){var longitude=observerInfo.longitude,latitude=observerInfo.latitude,altitude=observerInfo.altitude;return selectedSatellites.map(function(sat){var id=sat.satid;return fetch(\"\".concat(POSITION_API_BASE_URL,\"/\").concat(id,\"/\").concat(latitude,\"/\").concat(longitude,\"/\").concat(altitude,\"/\").concat(duration*60,\"&apiKey=\").concat(NY20_API_KEY)).then(function(response){return response.json();});});};var updateMarker=function updateMarker(data,index){setMarkersInfo(data.map(function(sat){return{lon:sat.positions[index].satlongitude,lat:sat.positions[index].satlatitude,name:sat.info.satname};}));};var startTracking=function startTracking(data){var index=59;var end=data[0].positions.length-1;setCurrentTimestamp(new Date(data[0].positions[index].timestamp*1000).toString());updateMarker(data,index);var timerId=setInterval(function(){index+=60;setProgressPercentage(index/end*100);updateMarker(data,index);setCurrentTimestamp(new Date(data[0].positions[index].timestamp*1000).toString());if(index>=end){setProgressText(progressStatus.Complete);setTimerId(undefined);onTracking(false);clearInterval(timerId);}},1000);return timerId;};var trackOnClick=function trackOnClick(){setProgressText(progressStatus.Tracking);setProgressPercentage(0);onTracking(true);Promise.all(fetchPositions()).then(function(data){var id=startTracking(data);setTimerId(id);}).catch(function(){// TO DO: add some fallback UI handler here\n});};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"track-info-panel\"},/*#__PURE__*/React.createElement(Button,{type:\"primary\",onClick:trackOnClick,disabled:selectedSatellites.length===0||disabled},\"Track selected satellites\"),/*#__PURE__*/React.createElement(\"span\",{style:{marginLeft:\"10px\",marginRight:\"10px\"}},\"for\"),/*#__PURE__*/React.createElement(InputNumber,{min:1,max:50,defaultValue:1,onChange:function onChange(value){return setDuration(value);},disabled:disabled}),/*#__PURE__*/React.createElement(\"span\",{style:{marginLeft:\"10px\",marginRight:\"30px\"}},\"minutes\"),/*#__PURE__*/React.createElement(Progress,{style:{width:\"500px\",marginRight:\"150px\"},percent:progressPercentage,format:function format(){return progressText;}}),timerId&&/*#__PURE__*/React.createElement(Button,{type:\"primary\",onClick:abortOnClick},\"Abort\")),/*#__PURE__*/React.createElement(\"div\",{className:\"time-stamp-container\",style:{textAlign:\"center\"}},/*#__PURE__*/React.createElement(\"b\",null,currentTimestamp)),/*#__PURE__*/React.createElement(ComposableMap,{projectionConfig:{scale:137},style:{height:\"700px\",marginLeft:\"100px\"}},/*#__PURE__*/React.createElement(Graticule,{stroke:\"#DDD\",strokeWidth:0.5}),/*#__PURE__*/React.createElement(Sphere,{stroke:\"#DDD\",strokeWidth:0.5}),/*#__PURE__*/React.createElement(Geographies,{geography:geoUrl},function(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo){return/*#__PURE__*/React.createElement(Geography,{key:geo.rsmKey,geography:geo,fill:\"#DDD\",stroke:\"#FFF\"});});}),markersInfo.map(function(mark){return/*#__PURE__*/React.createElement(Marker,{coordinates:[mark.lon,mark.lat]},/*#__PURE__*/React.createElement(\"circle\",{r:4,fill:\"#F53\"}),/*#__PURE__*/React.createElement(\"text\",null,mark.name));})));};export default WorldMap;","map":{"version":3,"sources":["C:/Users/lishi/my-app/src/components/WorldMap.js"],"names":["React","useState","Geographies","Geography","Graticule","Sphere","ComposableMap","Marker","Button","InputNumber","Progress","NY20_API_KEY","NY20_BASE_URL","POSITION_API_BASE_URL","progressStatus","Idle","Tracking","Complete","geoUrl","WorldMap","selectedSatellites","disabled","onTracking","observerInfo","duration","setDuration","progressPercentage","setProgressPercentage","progressText","setProgressText","undefined","timerId","setTimerId","markersInfo","setMarkersInfo","currentTimestamp","setCurrentTimestamp","abortOnClick","clearInterval","fetchPositions","longitude","latitude","altitude","map","sat","id","satid","fetch","then","response","json","updateMarker","data","index","lon","positions","satlongitude","lat","satlatitude","name","info","satname","startTracking","end","length","Date","timestamp","toString","setInterval","trackOnClick","Promise","all","catch","marginLeft","marginRight","value","width","textAlign","scale","height","geographies","geo","rsmKey","mark"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  Sphere,\r\n  ComposableMap,\r\n  Marker\r\n} from \"react-simple-maps\";\r\nimport { Button, InputNumber, Progress } from \"antd\";\r\nimport { NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\r\n\r\nexport const POSITION_API_BASE_URL = `${NY20_BASE_URL}/positions`;\r\n\r\nconst progressStatus = {\r\n  Idle: 'Idle',\r\n  Tracking: 'Tracking...',\r\n  Complete: 'Complete'\r\n}\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst WorldMap = ({\r\n  selectedSatellites,\r\n  disabled,\r\n  onTracking,\r\n  observerInfo\r\n}) => {\r\n  const [duration, setDuration] = useState(1);\r\n  const [progressPercentage, setProgressPercentage] = useState(0);\r\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\r\n  const [timerId, setTimerId] = useState(undefined);\r\n  const [markersInfo, setMarkersInfo] = useState([]);\r\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\r\n\r\n  const abortOnClick = () => {\r\n    if (timerId) {\r\n      clearInterval(timerId);\r\n      setProgressPercentage(0);\r\n      setProgressText(progressStatus.Idle);\r\n      onTracking(false);\r\n      setTimerId(undefined);\r\n    }\r\n  }\r\n\r\n  const fetchPositions = () => {\r\n    const { longitude, latitude, altitude } = observerInfo;\r\n\r\n    return selectedSatellites.map((sat) => {\r\n      const id = sat.satid;\r\n      return fetch(`${POSITION_API_BASE_URL}/${id}/${latitude}/${longitude}/${altitude}/${duration * 60}&apiKey=${NY20_API_KEY}`)\r\n        .then(response => response.json());\r\n    })\r\n  }\r\n\r\n  const updateMarker = (data, index) => {\r\n    setMarkersInfo(data.map((sat) => {\r\n      return {\r\n        lon: sat.positions[index].satlongitude,\r\n        lat: sat.positions[index].satlatitude,\r\n        name: sat.info.satname,\r\n      };\r\n    }))\r\n  }\r\n\r\n  const startTracking = (data) => {\r\n    let index = 59;\r\n    let end = data[0].positions.length - 1;\r\n    \r\n    setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n    updateMarker(data, index);\r\n    const timerId =  setInterval(() => {\r\n      index += 60;\r\n      setProgressPercentage((index / end) * 100);\r\n      updateMarker(data, index);\r\n      setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n\r\n      if (index >= end) {\r\n        setProgressText(progressStatus.Complete);\r\n        setTimerId(undefined);\r\n        onTracking(false);\r\n        clearInterval(timerId);\r\n      }\r\n\r\n    }, 1000);\r\n\r\n    return timerId;\r\n  }\r\n\r\n  const trackOnClick = () => {\r\n    setProgressText(progressStatus.Tracking);\r\n    setProgressPercentage(0);\r\n    onTracking(true);\r\n\r\n    Promise.all(fetchPositions()).then((data) => {\r\n      const id = startTracking(data);\r\n      setTimerId(id);\r\n    }).catch(() => {\r\n      // TO DO: add some fallback UI handler here\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"track-info-panel\">\r\n        <Button \r\n          type=\"primary\"\r\n          onClick={trackOnClick}\r\n          disabled={selectedSatellites.length === 0 || disabled}\r\n        >\r\n          Track selected satellites\r\n        </Button>\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>for</span>\r\n        <InputNumber \r\n          min={1}\r\n          max={50}\r\n          defaultValue={1}\r\n          onChange={(value) => setDuration(value)}\r\n          disabled={disabled}\r\n        />\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"30px\" }}>minutes</span>\r\n        <Progress \r\n          style={{ width: \"500px\", marginRight: \"150px\" }}\r\n          percent={progressPercentage} \r\n          format={() => progressText} \r\n        />\r\n        {timerId &&\r\n          <Button \r\n            type=\"primary\"\r\n            onClick={abortOnClick}\r\n          >\r\n            Abort\r\n          </Button>\r\n        }\r\n      </div>\r\n      <div className=\"time-stamp-container\" style={{textAlign: \"center\"}}>\r\n        <b>{currentTimestamp}</b>\r\n      </div>\r\n      <ComposableMap projectionConfig={{ scale: 137 }} style={{ height: \"700px\", marginLeft: \"100px\" }}>\r\n        <Graticule stroke=\"#DDD\" strokeWidth={0.5} />\r\n        <Sphere stroke=\"#DDD\" strokeWidth={0.5} />\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                fill=\"#DDD\"\r\n                stroke=\"#FFF\"\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n        {\r\n          markersInfo.map((mark) => \r\n            <Marker coordinates={[mark.lon, mark.lat]}>\r\n              <circle r={4} fill=\"#F53\" />\r\n              <text>{mark.name}</text>\r\n            </Marker>\r\n          )\r\n        }\r\n      </ComposableMap>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}