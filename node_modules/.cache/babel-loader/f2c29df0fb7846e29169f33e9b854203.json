{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lishi\\\\my-app\\\\src\\\\components\\\\Main.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Col, Row } from \"antd\";\nimport ObserverInfo from \"./ObserverInfo\";\nimport { SAT_CATEGORY, NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nexport const ABOVE_API_BASE_URL = `${NY20_BASE_URL}/above`;\n\nconst Main = () => {\n  const [loading, setLoading] = useState(false);\n  const [satList, setSatList] = useState([]);\n  const [trakcing, setTracking] = useState(false);\n  const [observerInfo, setObserverInfo] = useState({});\n  const [locationAvailable, setLocationAvailable] = useState(false);\n  const [curLa, setCurLa] = useState({});\n  const [curLon, setCurLon] = useState({});\n  const [initialValues, setInitialValues] = useState({\n    longitude: 0,\n    latitude: 0,\n    altitude: 0,\n    radius: 0\n  });\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      console.log(\"Available\");\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCurLa(Number(position.coords.latitude.toFixed(6)));\n        setCurLon(Number(position.coords.longitude.toFixed(6)));\n        setLocationAvailable(true);\n      });\n    } else {\n      axios.get('http://ipinfo.io/json', null).then(res => {\n        if ('loc' in res) {\n          let loc = res.loc.split(',');\n          setCurLa(Number(loc[0].toFixed(2)));\n          setCurLon(Number(loc[1].toFixed(2)));\n          setLocationAvailable(true);\n        } else {\n          console.warn('Getting location by IP failed.');\n        }\n      }).catch(res => console.log(res.error));\n    }\n  }, []);\n\n  const findSatellitesOnClick = nextObserverInfo => {\n    setObserverInfo(nextObserverInfo);\n    const {\n      longitude,\n      latitude,\n      altitude,\n      radius\n    } = nextObserverInfo;\n    setLoading(true);\n    fetch(`${ABOVE_API_BASE_URL}/${latitude}/${longitude}/${altitude}/${radius}/${SAT_CATEGORY}&apiKey=${NY20_API_KEY}`).then(response => response.json()).then(data => {\n      setSatList(data.above.map(satellite => {\n        return { ...satellite,\n          selected: false\n        };\n      }));\n      setLoading(false);\n    }).catch(() => {\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ObserverInfo, {\n    findSatellitesOnClick: findSatellitesOnClick,\n    loading: loading,\n    disabled: trakcing,\n    initialValues: initialValues,\n    setInitialValues: setInitialValues,\n    locationAvailable: locationAvailable,\n    curLa: curLa,\n    curLon: curLon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SatelliteList, {\n    satList: satList,\n    updateSatelliteList: setSatList,\n    loading: loading,\n    disabled: trakcing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WorldMap, {\n    selectedSatellites: satList.filter(sat => sat.selected),\n    onTracking: setTracking,\n    disabled: trakcing,\n    observerInfo: observerInfo,\n    initialValues: initialValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/lishi/my-app/src/components/Main.js"],"names":["React","useState","useEffect","Col","Row","ObserverInfo","SAT_CATEGORY","NY20_API_KEY","NY20_BASE_URL","SatelliteList","WorldMap","ABOVE_API_BASE_URL","Main","loading","setLoading","satList","setSatList","trakcing","setTracking","observerInfo","setObserverInfo","locationAvailable","setLocationAvailable","curLa","setCurLa","curLon","setCurLon","initialValues","setInitialValues","longitude","latitude","altitude","radius","navigator","console","log","geolocation","getCurrentPosition","position","Number","coords","toFixed","axios","get","then","res","loc","split","warn","catch","error","findSatellitesOnClick","nextObserverInfo","fetch","response","json","data","above","map","satellite","selected","filter","sat"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from \"react\";\r\nimport { Col, Row } from \"antd\";\r\nimport ObserverInfo from \"./ObserverInfo\";\r\nimport { SAT_CATEGORY, NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\r\nimport SatelliteList from \"./SatelliteList\";\r\nimport WorldMap from \"./WorldMap\";\r\n\r\nexport const ABOVE_API_BASE_URL = `${NY20_BASE_URL}/above`;\r\n\r\nconst Main = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [satList, setSatList] = useState([]);\r\n  const [trakcing, setTracking] = useState(false);\r\n  const [observerInfo, setObserverInfo] = useState({});\r\n  const [locationAvailable, setLocationAvailable] = useState(false);\r\n  const [curLa, setCurLa] = useState({});\r\n  const [curLon, setCurLon] = useState({});\r\n  const [initialValues, setInitialValues] = useState({\r\n    longitude: 0,\r\n    latitude: 0,\r\n    altitude: 0,\r\n    radius: 0\r\n  })\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      console.log(\"Available\");\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        setCurLa(Number((position.coords.latitude).toFixed(6)));\r\n        setCurLon(Number((position.coords.longitude).toFixed(6)));\r\n        setLocationAvailable(true);\r\n      });\r\n    } else {\r\n      axios.get('http://ipinfo.io/json', null)\r\n        .then(res => {\r\n          if ('loc' in res) {\r\n            let loc = res.loc.split(',');\r\n            setCurLa(Number((loc[0]).toFixed(2)));\r\n            setCurLon(Number((loc[1]).toFixed(2)));\r\n            setLocationAvailable(true);\r\n          } else {\r\n            console.warn('Getting location by IP failed.');\r\n          }\r\n        })\r\n        .catch(res=> console.log(res.error))\r\n    }\r\n  }, [])\r\n\r\n  const findSatellitesOnClick = (nextObserverInfo) => {\r\n    setObserverInfo(nextObserverInfo);\r\n    const { longitude, latitude, altitude, radius } = nextObserverInfo;\r\n\r\n    setLoading(true);\r\n    fetch(`${ABOVE_API_BASE_URL}/${latitude}/${longitude}/${altitude}/${radius}/${SAT_CATEGORY}&apiKey=${NY20_API_KEY}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setSatList(data.above.map((satellite) => {\r\n          return {\r\n            ...satellite,\r\n            selected: false,\r\n          }\r\n        }));\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={8}>\r\n        <ObserverInfo \r\n          findSatellitesOnClick={findSatellitesOnClick}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n          initialValues={initialValues}\r\n          setInitialValues={setInitialValues}\r\n          locationAvailable={locationAvailable}\r\n          curLa={curLa}\r\n          curLon={curLon}\r\n        />\r\n        <SatelliteList \r\n          satList={satList}\r\n          updateSatelliteList={setSatList}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n        />\r\n      </Col>\r\n      <Col span={16}>\r\n        <WorldMap \r\n          selectedSatellites={satList.filter(sat => sat.selected)}\r\n          onTracking={setTracking}\r\n          disabled={trakcing}\r\n          observerInfo={observerInfo}\r\n          initialValues={initialValues}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}