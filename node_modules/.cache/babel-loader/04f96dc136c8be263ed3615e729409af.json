{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\lishi\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\lishi\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Col,Row}from\"antd\";import ObserverInfo from\"./ObserverInfo\";import{SAT_CATEGORY,NY20_API_KEY,NY20_BASE_URL}from\"../constants\";import SatelliteList from\"./SatelliteList\";import WorldMap from\"./WorldMap\";import axios from'axios';export var ABOVE_API_BASE_URL=\"\".concat(NY20_BASE_URL,\"/above\");var Main=function Main(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),satList=_useState4[0],setSatList=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),trakcing=_useState6[0],setTracking=_useState6[1];var _useState7=useState({}),_useState8=_slicedToArray(_useState7,2),observerInfo=_useState8[0],setObserverInfo=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),locationAvailable=_useState10[0],setLocationAvailable=_useState10[1];var _useState11=useState({}),_useState12=_slicedToArray(_useState11,2),curLa=_useState12[0],setCurLa=_useState12[1];var _useState13=useState({}),_useState14=_slicedToArray(_useState13,2),curLon=_useState14[0],setCurLon=_useState14[1];var _useState15=useState({longitude:0,latitude:0,altitude:0,radius:0}),_useState16=_slicedToArray(_useState15,2),initialValues=_useState16[0],setInitialValues=_useState16[1];useEffect(function(){if(\"geolocation\"in navigator){console.log(\"Available\");navigator.geolocation.getCurrentPosition(function(position){setCurLa(Number(position.coords.latitude.toFixed(6)));setCurLon(Number(position.coords.longitude.toFixed(6)));setLocationAvailable(true);});}else{axios.get('http://ipinfo.io/json',null).then(function(res){if('loc'in res){var loc=res.loc.split(',');setCurLa(Number(loc[0].toFixed(2)));setCurLon(Number(loc[1].toFixed(2)));setLocationAvailable(true);}else{console.warn('Getting location by IP failed.');}}).catch(function(res){return console.log(res.error);});}},[]);var findSatellitesOnClick=function findSatellitesOnClick(nextObserverInfo){setObserverInfo(nextObserverInfo);var longitude=nextObserverInfo.longitude,latitude=nextObserverInfo.latitude,altitude=nextObserverInfo.altitude,radius=nextObserverInfo.radius;setLoading(true);fetch(\"\".concat(ABOVE_API_BASE_URL,\"/\").concat(latitude,\"/\").concat(longitude,\"/\").concat(altitude,\"/\").concat(radius,\"/\").concat(SAT_CATEGORY,\"&apiKey=\").concat(NY20_API_KEY)).then(function(response){return response.json();}).then(function(data){setSatList(data.above.map(function(satellite){return _objectSpread(_objectSpread({},satellite),{},{selected:false});}));setLoading(false);}).catch(function(){setLoading(false);});};return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{span:8},/*#__PURE__*/React.createElement(ObserverInfo,{findSatellitesOnClick:findSatellitesOnClick,loading:loading,disabled:trakcing,initialValues:initialValues,setInitialValues:setInitialValues,locationAvailable:locationAvailable,curLa:curLa,curLon:curLon}),/*#__PURE__*/React.createElement(SatelliteList,{satList:satList,updateSatelliteList:setSatList,loading:loading,disabled:trakcing})),/*#__PURE__*/React.createElement(Col,{span:16},/*#__PURE__*/React.createElement(WorldMap,{selectedSatellites:satList.filter(function(sat){return sat.selected;}),onTracking:setTracking,disabled:trakcing,observerInfo:observerInfo,initialValues:initialValues})));};export default Main;","map":{"version":3,"sources":["C:/Users/lishi/my-app/src/components/Main.js"],"names":["React","useState","useEffect","Col","Row","ObserverInfo","SAT_CATEGORY","NY20_API_KEY","NY20_BASE_URL","SatelliteList","WorldMap","axios","ABOVE_API_BASE_URL","Main","loading","setLoading","satList","setSatList","trakcing","setTracking","observerInfo","setObserverInfo","locationAvailable","setLocationAvailable","curLa","setCurLa","curLon","setCurLon","longitude","latitude","altitude","radius","initialValues","setInitialValues","navigator","console","log","geolocation","getCurrentPosition","position","Number","coords","toFixed","get","then","res","loc","split","warn","catch","error","findSatellitesOnClick","nextObserverInfo","fetch","response","json","data","above","map","satellite","selected","filter","sat"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from \"react\";\r\nimport { Col, Row } from \"antd\";\r\nimport ObserverInfo from \"./ObserverInfo\";\r\nimport { SAT_CATEGORY, NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\r\nimport SatelliteList from \"./SatelliteList\";\r\nimport WorldMap from \"./WorldMap\";\r\nimport axios from 'axios';\r\n\r\nexport const ABOVE_API_BASE_URL = `${NY20_BASE_URL}/above`;\r\n\r\nconst Main = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [satList, setSatList] = useState([]);\r\n  const [trakcing, setTracking] = useState(false);\r\n  const [observerInfo, setObserverInfo] = useState({});\r\n  const [locationAvailable, setLocationAvailable] = useState(false);\r\n  const [curLa, setCurLa] = useState({});\r\n  const [curLon, setCurLon] = useState({});\r\n  const [initialValues, setInitialValues] = useState({\r\n    longitude: 0,\r\n    latitude: 0,\r\n    altitude: 0,\r\n    radius: 0\r\n  })\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      console.log(\"Available\");\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        setCurLa(Number((position.coords.latitude).toFixed(6)));\r\n        setCurLon(Number((position.coords.longitude).toFixed(6)));\r\n        setLocationAvailable(true);\r\n      });\r\n    } else {\r\n      axios.get('http://ipinfo.io/json', null)\r\n        .then(res => {\r\n          if ('loc' in res) {\r\n            let loc = res.loc.split(',');\r\n            setCurLa(Number((loc[0]).toFixed(2)));\r\n            setCurLon(Number((loc[1]).toFixed(2)));\r\n            setLocationAvailable(true);\r\n          } else {\r\n            console.warn('Getting location by IP failed.');\r\n          }\r\n        })\r\n        .catch(res=> console.log(res.error))\r\n    }\r\n  }, [])\r\n\r\n  const findSatellitesOnClick = (nextObserverInfo) => {\r\n    setObserverInfo(nextObserverInfo);\r\n    const { longitude, latitude, altitude, radius } = nextObserverInfo;\r\n\r\n    setLoading(true);\r\n    fetch(`${ABOVE_API_BASE_URL}/${latitude}/${longitude}/${altitude}/${radius}/${SAT_CATEGORY}&apiKey=${NY20_API_KEY}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setSatList(data.above.map((satellite) => {\r\n          return {\r\n            ...satellite,\r\n            selected: false,\r\n          }\r\n        }));\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={8}>\r\n        <ObserverInfo \r\n          findSatellitesOnClick={findSatellitesOnClick}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n          initialValues={initialValues}\r\n          setInitialValues={setInitialValues}\r\n          locationAvailable={locationAvailable}\r\n          curLa={curLa}\r\n          curLon={curLon}\r\n        />\r\n        <SatelliteList \r\n          satList={satList}\r\n          updateSatelliteList={setSatList}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n        />\r\n      </Col>\r\n      <Col span={16}>\r\n        <WorldMap \r\n          selectedSatellites={satList.filter(sat => sat.selected)}\r\n          onTracking={setTracking}\r\n          disabled={trakcing}\r\n          observerInfo={observerInfo}\r\n          initialValues={initialValues}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}