{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lishi\\\\my-app\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { useState } from \"react\";\nimport { Geographies, Geography, Graticule, Sphere, ComposableMap, Marker, Line } from \"react-simple-maps\";\nimport { Button, InputNumber, Progress } from \"antd\";\nimport { NY20_API_KEY, NY20_BASE_URL, COLOR } from \"../constants\";\nexport const POSITION_API_BASE_URL = `${NY20_BASE_URL}/positions`;\nconst progressStatus = {\n  Idle: 'Idle',\n  Tracking: 'Tracking...',\n  Complete: 'Complete'\n};\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst WorldMap = ({\n  selectedSatellites,\n  disabled,\n  onTracking,\n  observerInfo,\n  initialValues\n}) => {\n  const [duration, setDuration] = useState(1);\n  const [progressPercentage, setProgressPercentage] = useState(0);\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\n  const [timerId, setTimerId] = useState(undefined);\n  const [markersInfo, setMarkersInfo] = useState([]);\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\n\n  const abortOnClick = () => {\n    if (timerId) {\n      clearInterval(timerId);\n      setProgressPercentage(0);\n      setProgressText(progressStatus.Idle);\n      onTracking(false);\n      setTimerId(undefined);\n    }\n  };\n\n  const fetchPositions = () => {\n    const {\n      longitude,\n      latitude,\n      altitude\n    } = observerInfo;\n    return selectedSatellites.map(sat => {\n      const id = sat.satid;\n      return fetch(`${POSITION_API_BASE_URL}/${id}/${latitude}/${longitude}/${altitude}/${duration * 60}&apiKey=${NY20_API_KEY}`).then(response => response.json());\n    });\n  };\n\n  const updateMarker = (data, index) => {\n    setMarkersInfo(data.map(sat => {\n      return {\n        startLon: sat.positions[0].satlongitude,\n        startLat: sat.positions[0].satlatitude,\n        midLon: sat.positions[Math.floor(index / 2)].satlongitude,\n        midLat: sat.positions[Math.floor(index / 2)].satlatitude,\n        lon: sat.positions[index].satlongitude,\n        lat: sat.positions[index].satlatitude,\n        name: sat.info.satname\n      };\n    }));\n  };\n\n  const startTracking = data => {\n    let index = 59;\n    let end = data[0].positions.length - 1;\n    setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\n    setProgressPercentage(index / end * 100);\n    updateMarker(data, index);\n    const timerId = setInterval(() => {\n      index += 60;\n\n      if (index >= end) {\n        setProgressText(progressStatus.Complete);\n        setProgressPercentage(index / end * 100);\n        setTimerId(undefined);\n        onTracking(false);\n        clearInterval(timerId);\n        return;\n      }\n\n      setProgressPercentage(index / end * 100);\n      updateMarker(data, index);\n      setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\n    }, 1000);\n    return timerId;\n  };\n\n  const trackOnClick = () => {\n    setProgressText(progressStatus.Tracking);\n    setProgressPercentage(0);\n    onTracking(true);\n    Promise.all(fetchPositions()).then(data => {\n      const id = startTracking(data);\n      setTimerId(id);\n    }).catch(() => {\n      console.log(\"error\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"track-info-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: trackOnClick,\n    disabled: selectedSatellites.length === 0 || disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Track selected satellite(s)\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: \"10px\",\n      marginRight: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"for\"), /*#__PURE__*/React.createElement(InputNumber, {\n    min: 1,\n    max: 59,\n    defaultValue: 1,\n    onChange: value => setDuration(value),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: \"10px\",\n      marginRight: \"30px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"minutes (1 ~ 59)\"), /*#__PURE__*/React.createElement(Progress, {\n    style: {\n      width: \"500px\",\n      marginRight: \"150px\"\n    },\n    percent: progressPercentage,\n    format: () => progressText,\n    strokeColor: {\n      from: '#108ee9',\n      to: '#87d068'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), timerId && /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: abortOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Abort\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-stamp-container\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, currentTimestamp)), /*#__PURE__*/React.createElement(ComposableMap, {\n    projectionConfig: {\n      scale: 137\n    },\n    height: 480,\n    style: {\n      width: \"95%\",\n      marginLeft: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Graticule, {\n    stroke: \"#777\",\n    strokeWidth: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Sphere, {\n    stroke: \"#b8d6fd\",\n    strokeWidth: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: \"#c0d6e4\",\n    stroke: \"#FFF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }))), initialValues.longitude && initialValues.latitude ? /*#__PURE__*/React.createElement(Marker, {\n    coordinates: [initialValues.longitude, initialValues.latitude],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    r: 3,\n    fill: \"#F53\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"text\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"Observer\")) : null, markersInfo.map((mark, index) => /*#__PURE__*/React.createElement(Line, {\n    coordinates: [[mark.startLon, mark.startLat], [mark.midLon, mark.midLat], [mark.lon, mark.lat]],\n    stroke: index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1],\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  })), markersInfo.map((mark, index) => /*#__PURE__*/React.createElement(Marker, {\n    coordinates: [mark.lon, mark.lat],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    r: 4,\n    fill: index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"text\", {\n    \"text-anchor\": \"middle\",\n    x: mark.Lon > mark.startLon ? \"10\" : \"20\",\n    y: \"20\",\n    fill: \"#0c66a7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 16\n    }\n  }, mark.name))), markersInfo.map((mark, index) => /*#__PURE__*/React.createElement(Marker, {\n    coordinates: [mark.startLon, mark.startLat],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    r: 3,\n    fill: index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["C:/Users/lishi/my-app/src/components/WorldMap.js"],"names":["React","useState","Geographies","Geography","Graticule","Sphere","ComposableMap","Marker","Line","Button","InputNumber","Progress","NY20_API_KEY","NY20_BASE_URL","COLOR","POSITION_API_BASE_URL","progressStatus","Idle","Tracking","Complete","geoUrl","WorldMap","selectedSatellites","disabled","onTracking","observerInfo","initialValues","duration","setDuration","progressPercentage","setProgressPercentage","progressText","setProgressText","timerId","setTimerId","undefined","markersInfo","setMarkersInfo","currentTimestamp","setCurrentTimestamp","abortOnClick","clearInterval","fetchPositions","longitude","latitude","altitude","map","sat","id","satid","fetch","then","response","json","updateMarker","data","index","startLon","positions","satlongitude","startLat","satlatitude","midLon","Math","floor","midLat","lon","lat","name","info","satname","startTracking","end","length","Date","timestamp","toString","setInterval","trackOnClick","Promise","all","catch","console","log","marginLeft","marginRight","value","width","from","to","textAlign","scale","geographies","geo","rsmKey","mark","Lon"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,aALF,EAMEC,MANF,EAOEC,IAPF,QAQO,mBARP;AASA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,QAA9B,QAA8C,MAA9C;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,KAAtC,QAAmD,cAAnD;AAEA,OAAO,MAAMC,qBAAqB,GAAI,GAAEF,aAAc,YAA/C;AAEP,MAAMG,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,QAAQ,EAAE,aAFW;AAGrBC,EAAAA,QAAQ,EAAE;AAHW,CAAvB;AAMA,MAAMC,MAAM,GACV,wGADF;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,kBADgB;AAEhBC,EAAAA,QAFgB;AAGhBC,EAAAA,UAHgB;AAIhBC,EAAAA,YAJgB;AAKhBC,EAAAA;AALgB,CAAD,KAMX;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAAC4B,kBAAD,EAAqBC,qBAArB,IAA8C7B,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAAC8B,YAAD,EAAeC,eAAf,IAAkC/B,QAAQ,CAACe,cAAc,CAACC,IAAhB,CAAhD;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAACkC,SAAD,CAAtC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCpC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACqC,gBAAD,EAAmBC,mBAAnB,IAA0CtC,QAAQ,CAAC,EAAD,CAAxD;;AAEA,QAAMuC,YAAY,GAAG,MAAM;AACzB,QAAIP,OAAJ,EAAa;AACXQ,MAAAA,aAAa,CAACR,OAAD,CAAb;AACAH,MAAAA,qBAAqB,CAAC,CAAD,CAArB;AACAE,MAAAA,eAAe,CAAChB,cAAc,CAACC,IAAhB,CAAf;AACAO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAU,MAAAA,UAAU,CAACC,SAAD,CAAV;AACD;AACF,GARD;;AAUA,QAAMO,cAAc,GAAG,MAAM;AAC3B,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,QAAoCpB,YAA1C;AAEA,WAAOH,kBAAkB,CAACwB,GAAnB,CAAwBC,GAAD,IAAS;AACrC,YAAMC,EAAE,GAAGD,GAAG,CAACE,KAAf;AACA,aAAOC,KAAK,CAAE,GAAEnC,qBAAsB,IAAGiC,EAAG,IAAGJ,QAAS,IAAGD,SAAU,IAAGE,QAAS,IAAGlB,QAAQ,GAAG,EAAG,WAAUf,YAAa,EAA7G,CAAL,CACJuC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,CAAP;AAED,KAJM,CAAP;AAKD,GARD;;AAUA,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpCnB,IAAAA,cAAc,CAACkB,IAAI,CAACT,GAAL,CAAUC,GAAD,IAAS;AAC/B,aAAO;AACLU,QAAAA,QAAQ,EAAEV,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiBC,YADtB;AAELC,QAAAA,QAAQ,EAAEb,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiBG,WAFtB;AAGLC,QAAAA,MAAM,EAAEf,GAAG,CAACW,SAAJ,CAAcK,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAG,CAAnB,CAAd,EAAqCG,YAHxC;AAILM,QAAAA,MAAM,EAAElB,GAAG,CAACW,SAAJ,CAAcK,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAG,CAAnB,CAAd,EAAqCK,WAJxC;AAKLK,QAAAA,GAAG,EAAEnB,GAAG,CAACW,SAAJ,CAAcF,KAAd,EAAqBG,YALrB;AAMLQ,QAAAA,GAAG,EAAEpB,GAAG,CAACW,SAAJ,CAAcF,KAAd,EAAqBK,WANrB;AAOLO,QAAAA,IAAI,EAAErB,GAAG,CAACsB,IAAJ,CAASC;AAPV,OAAP;AASD,KAVc,CAAD,CAAd;AAWD,GAZD;;AAcA,QAAMC,aAAa,GAAIhB,IAAD,IAAU;AAC9B,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIgB,GAAG,GAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBe,MAAlB,GAA2B,CAArC;AAEAlC,IAAAA,mBAAmB,CAAC,IAAImC,IAAJ,CAASnB,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBF,KAAlB,EAAyBmB,SAAzB,GAAqC,IAA9C,EAAoDC,QAApD,EAAD,CAAnB;AACA9C,IAAAA,qBAAqB,CAAE0B,KAAK,GAAGgB,GAAT,GAAgB,GAAjB,CAArB;AACAlB,IAAAA,YAAY,CAACC,IAAD,EAAOC,KAAP,CAAZ;AACA,UAAMvB,OAAO,GAAI4C,WAAW,CAAC,MAAM;AACjCrB,MAAAA,KAAK,IAAI,EAAT;;AACA,UAAIA,KAAK,IAAIgB,GAAb,EAAkB;AAChBxC,QAAAA,eAAe,CAAChB,cAAc,CAACG,QAAhB,CAAf;AACAW,QAAAA,qBAAqB,CAAE0B,KAAK,GAAGgB,GAAT,GAAgB,GAAjB,CAArB;AACAtC,QAAAA,UAAU,CAACC,SAAD,CAAV;AACAX,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAiB,QAAAA,aAAa,CAACR,OAAD,CAAb;AACA;AACD;;AACDH,MAAAA,qBAAqB,CAAE0B,KAAK,GAAGgB,GAAT,GAAgB,GAAjB,CAArB;AACAlB,MAAAA,YAAY,CAACC,IAAD,EAAOC,KAAP,CAAZ;AACAjB,MAAAA,mBAAmB,CAAC,IAAImC,IAAJ,CAASnB,IAAI,CAAC,CAAD,CAAJ,CAAQG,SAAR,CAAkBF,KAAlB,EAAyBmB,SAAzB,GAAqC,IAA9C,EAAoDC,QAApD,EAAD,CAAnB;AAGD,KAf2B,EAezB,IAfyB,CAA5B;AAiBA,WAAO3C,OAAP;AACD,GAzBD;;AA2BA,QAAM6C,YAAY,GAAG,MAAM;AACzB9C,IAAAA,eAAe,CAAChB,cAAc,CAACE,QAAhB,CAAf;AACAY,IAAAA,qBAAqB,CAAC,CAAD,CAArB;AACAN,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAuD,IAAAA,OAAO,CAACC,GAAR,CAAYtC,cAAc,EAA1B,EAA8BS,IAA9B,CAAoCI,IAAD,IAAU;AAC3C,YAAMP,EAAE,GAAGuB,aAAa,CAAChB,IAAD,CAAxB;AACArB,MAAAA,UAAU,CAACc,EAAD,CAAV;AACD,KAHD,EAGGiC,KAHH,CAGS,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KALD;AAMD,GAXD;;AAaA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,OAAO,EAAEL,YAFX;AAGE,IAAA,QAAQ,EAAExD,kBAAkB,CAACmD,MAAnB,KAA8B,CAA9B,IAAmClD,QAH/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,eAQE;AAAM,IAAA,KAAK,EAAE;AAAE6D,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,WAAW,EAAE;AAAnC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WARF,eASE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAE,CADP;AAEE,IAAA,GAAG,EAAE,EAFP;AAGE,IAAA,YAAY,EAAE,CAHhB;AAIE,IAAA,QAAQ,EAAGC,KAAD,IAAW1D,WAAW,CAAC0D,KAAD,CAJlC;AAKE,IAAA,QAAQ,EAAE/D,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAgBE;AAAM,IAAA,KAAK,EAAE;AAAE6D,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,WAAW,EAAE;AAAnC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAhBF,eAiBE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAE,OAAT;AAAkBF,MAAAA,WAAW,EAAE;AAA/B,KADT;AAEE,IAAA,OAAO,EAAExD,kBAFX;AAGE,IAAA,MAAM,EAAE,MAAME,YAHhB;AAIE,IAAA,WAAW,EAAE;AACXyD,MAAAA,IAAI,EAAE,SADK;AAEXC,MAAAA,EAAE,EAAE;AAFO,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,EA0BGxD,OAAO,iBACN,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,OAAO,EAAEO,YAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3BJ,CADF,eAoCE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,KAAK,EAAE;AAACkD,MAAAA,SAAS,EAAE;AAAZ,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIpD,gBAAJ,CADF,CApCF,eAuCE,oBAAC,aAAD;AAAe,IAAA,gBAAgB,EAAE;AAAEqD,MAAAA,KAAK,EAAE;AAAT,KAAjC;AAAiD,IAAA,MAAM,EAAI,GAA3D;AAAgE,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAE,KAAT;AAAgBH,MAAAA,UAAU,EAAE;AAA5B,KAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAC,MAAlB;AAAyB,IAAA,WAAW,EAAE,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAC,SAAf;AAAyB,IAAA,WAAW,EAAE,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEhE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEwE,IAAAA;AAAF,GAAD,KACCA,WAAW,CAAC9C,GAAZ,CAAgB+C,GAAG,iBACjB,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACC,MADX;AAEE,IAAA,SAAS,EAAED,GAFb;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,MAAM,EAAC,MAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CAHF,EAgBInE,aAAa,CAACiB,SAAd,IAA2BjB,aAAa,CAACkB,QAAzC,gBACA,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,CAAClB,aAAa,CAACiB,SAAf,EAA0BjB,aAAa,CAACkB,QAAxC,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,CAAC,EAAE,CAAX;AAAc,IAAA,IAAI,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADA,GAIY,IApBhB,EAuBIR,WAAW,CAACU,GAAZ,CAAgB,CAACiD,IAAD,EAAOvC,KAAP,kBACd,oBAAC,IAAD;AACI,IAAA,WAAW,EAAE,CAAC,CAACuC,IAAI,CAACtC,QAAN,EAAgBsC,IAAI,CAACnC,QAArB,CAAD,EAAiC,CAACmC,IAAI,CAACjC,MAAN,EAAciC,IAAI,CAAC9B,MAAnB,CAAjC,EAA6D,CAAC8B,IAAI,CAAC7B,GAAN,EAAW6B,IAAI,CAAC5B,GAAhB,CAA7D,CADjB;AAEI,IAAA,MAAM,EAAEX,KAAK,GAAG1C,KAAK,CAAC2D,MAAd,GAAuB3D,KAAK,CAAC0C,KAAD,CAA5B,GAAsC1C,KAAK,CAACA,KAAK,CAAC2D,MAAN,GAAe,CAAhB,CAFvD;AAGI,IAAA,WAAW,EAAE,CAHjB;AAII,IAAA,aAAa,EAAC,OAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAvBJ,EAiCKrC,WAAW,CAACU,GAAZ,CAAgB,CAACiD,IAAD,EAAOvC,KAAP,kBAChB,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,CAACuC,IAAI,CAAC7B,GAAN,EAAW6B,IAAI,CAAC5B,GAAhB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,CAAC,EAAE,CAAX;AAAc,IAAA,IAAI,EAAEX,KAAK,GAAG1C,KAAK,CAAC2D,MAAd,GAAuB3D,KAAK,CAAC0C,KAAD,CAA5B,GAAsC1C,KAAK,CAACA,KAAK,CAAC2D,MAAN,GAAe,CAAhB,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAM,mBAAY,QAAlB;AACI,IAAA,CAAC,EAAEsB,IAAI,CAACC,GAAL,GAAWD,IAAI,CAACtC,QAAhB,GAA2B,IAA3B,GAAkC,IADzC;AAC+C,IAAA,CAAC,EAAC,IADjD;AACsD,IAAA,IAAI,EAAC,SAD3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACsEsC,IAAI,CAAC3B,IAD3E,CAFJ,CADA,CAjCL,EA0CIhC,WAAW,CAACU,GAAZ,CAAgB,CAACiD,IAAD,EAAOvC,KAAP,kBAChB,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,CAACuC,IAAI,CAACtC,QAAN,EAAgBsC,IAAI,CAACnC,QAArB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,CAAC,EAAE,CAAX;AAAc,IAAA,IAAI,EAAEJ,KAAK,GAAG1C,KAAK,CAAC2D,MAAd,GAAuB3D,KAAK,CAAC0C,KAAD,CAA5B,GAAsC1C,KAAK,CAACA,KAAK,CAAC2D,MAAN,GAAe,CAAhB,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA,CA1CJ,CAvCF,CADF;AA2FD,CAnLD;;AAqLA,eAAepD,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  Sphere,\r\n  ComposableMap,\r\n  Marker,\r\n  Line\r\n} from \"react-simple-maps\";\r\nimport { Button, InputNumber, Progress } from \"antd\";\r\nimport { NY20_API_KEY, NY20_BASE_URL, COLOR } from \"../constants\";\r\n\r\nexport const POSITION_API_BASE_URL = `${NY20_BASE_URL}/positions`;\r\n\r\nconst progressStatus = {\r\n  Idle: 'Idle',\r\n  Tracking: 'Tracking...',\r\n  Complete: 'Complete'\r\n}\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst WorldMap = ({\r\n  selectedSatellites,\r\n  disabled,\r\n  onTracking,\r\n  observerInfo,\r\n  initialValues\r\n}) => {\r\n  const [duration, setDuration] = useState(1);\r\n  const [progressPercentage, setProgressPercentage] = useState(0);\r\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\r\n  const [timerId, setTimerId] = useState(undefined);\r\n  const [markersInfo, setMarkersInfo] = useState([]);\r\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\r\n\r\n  const abortOnClick = () => {\r\n    if (timerId) {\r\n      clearInterval(timerId);\r\n      setProgressPercentage(0);\r\n      setProgressText(progressStatus.Idle);\r\n      onTracking(false);\r\n      setTimerId(undefined);\r\n    }\r\n  }\r\n\r\n  const fetchPositions = () => {\r\n    const { longitude, latitude, altitude } = observerInfo;\r\n\r\n    return selectedSatellites.map((sat) => {\r\n      const id = sat.satid;\r\n      return fetch(`${POSITION_API_BASE_URL}/${id}/${latitude}/${longitude}/${altitude}/${duration * 60}&apiKey=${NY20_API_KEY}`)\r\n        .then(response => response.json());\r\n    })\r\n  }\r\n\r\n  const updateMarker = (data, index) => {\r\n    setMarkersInfo(data.map((sat) => {\r\n      return {\r\n        startLon: sat.positions[0].satlongitude,\r\n        startLat: sat.positions[0].satlatitude,\r\n        midLon: sat.positions[Math.floor(index / 2)].satlongitude,\r\n        midLat: sat.positions[Math.floor(index / 2)].satlatitude,\r\n        lon: sat.positions[index].satlongitude,\r\n        lat: sat.positions[index].satlatitude,\r\n        name: sat.info.satname,\r\n      };\r\n    }))\r\n  }\r\n\r\n  const startTracking = (data) => {\r\n    let index = 59;\r\n    let end = data[0].positions.length - 1;\r\n    \r\n    setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n    setProgressPercentage((index / end) * 100);\r\n    updateMarker(data, index);\r\n    const timerId =  setInterval(() => {\r\n      index += 60;\r\n      if (index >= end) {\r\n        setProgressText(progressStatus.Complete);\r\n        setProgressPercentage((index / end) * 100);\r\n        setTimerId(undefined);\r\n        onTracking(false);\r\n        clearInterval(timerId);\r\n        return;\r\n      }\r\n      setProgressPercentage((index / end) * 100);\r\n      updateMarker(data, index);\r\n      setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n\r\n\r\n    }, 1000);\r\n\r\n    return timerId;\r\n  }\r\n\r\n  const trackOnClick = () => {\r\n    setProgressText(progressStatus.Tracking);\r\n    setProgressPercentage(0);\r\n    onTracking(true);\r\n\r\n    Promise.all(fetchPositions()).then((data) => {\r\n      const id = startTracking(data);\r\n      setTimerId(id);\r\n    }).catch(() => {\r\n      console.log(\"error\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"track-info-panel\">\r\n        <Button \r\n          type=\"primary\"\r\n          onClick={trackOnClick}\r\n          disabled={selectedSatellites.length === 0 || disabled}\r\n        >\r\n          Track selected satellite(s)\r\n        </Button>\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>for</span>\r\n        <InputNumber \r\n          min={1}\r\n          max={59}\r\n          defaultValue={1}\r\n          onChange={(value) => setDuration(value)}\r\n          disabled={disabled}\r\n        />\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"30px\" }}>minutes (1 ~ 59)</span>\r\n        <Progress \r\n          style={{ width: \"500px\", marginRight: \"150px\" }}\r\n          percent={progressPercentage} \r\n          format={() => progressText} \r\n          strokeColor={{\r\n            from: '#108ee9',\r\n            to: '#87d068',\r\n          }}\r\n        />\r\n        {timerId &&\r\n          <Button \r\n            type=\"primary\"\r\n            onClick={abortOnClick}\r\n          >\r\n            Abort\r\n          </Button>\r\n        }\r\n      </div>\r\n      <div className=\"time-stamp-container\" style={{textAlign: \"center\"}}>\r\n        <b>{currentTimestamp}</b>\r\n      </div>\r\n      <ComposableMap projectionConfig={{ scale: 137 }} height = {480} style={{ width: \"95%\", marginLeft: \"10px\" }}>\r\n        <Graticule stroke=\"#777\" strokeWidth={0.5} />\r\n        <Sphere stroke=\"#b8d6fd\" strokeWidth={0.5} />\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                fill=\"#c0d6e4\"\r\n                stroke=\"#FFF\"\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n        {\r\n          initialValues.longitude && initialValues.latitude ? \r\n          <Marker coordinates={[initialValues.longitude, initialValues.latitude]}>\r\n            <circle r={3} fill=\"#F53\" />\r\n            <text>Observer</text>\r\n          </Marker> : null\r\n        }\r\n        {\r\n          markersInfo.map((mark, index) =>\r\n            <Line\r\n                coordinates={[[mark.startLon, mark.startLat], [mark.midLon, mark.midLat], [mark.lon, mark.lat]]}\r\n                stroke={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]}\r\n                strokeWidth={2}\r\n                strokeLinecap=\"round\"\r\n            />\r\n          )\r\n        }\r\n        {\r\n           markersInfo.map((mark, index) =>\r\n           <Marker coordinates={[mark.lon, mark.lat]}>\r\n               <circle r={4} fill={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]} />\r\n               <text text-anchor=\"middle\"\r\n                   x={mark.Lon > mark.startLon ? \"10\" : \"20\"} y=\"20\" fill=\"#0c66a7\">{mark.name}</text>\r\n           </Marker>\r\n          )\r\n        }\r\n        {\r\n          markersInfo.map((mark, index) =>\r\n          <Marker coordinates={[mark.startLon, mark.startLat]}>\r\n              <circle r={3} fill={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]} />\r\n          </Marker>\r\n          )\r\n        }\r\n      </ComposableMap>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}