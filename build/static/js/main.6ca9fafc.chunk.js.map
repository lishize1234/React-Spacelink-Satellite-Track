{"version":3,"sources":["images/starlink_logo.svg","images/satellite.svg","images/stars_footer.jpg","components/ObserverInfo.js","constants.js","components/SatelliteList.js","components/WorldMap.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ObserverInfo","props","curLon","curLa","initialValues","setInitialValues","locationAvailable","tailLayout","wrapperCol","offset","span","onChangeHandler","e","name","className","level","disabled","style","margin","color","onChange","checked","curLocation","console","log","autoFillLocation","target","labelCol","onFinish","observerInfo","findSatellitesOnClick","Item","label","rules","required","message","min","max","width","value","longitude","latitude","altitude","radius","type","htmlType","loading","COLOR","SatelliteList","satList","updateSatelliteList","length","itemLayout","dataSource","renderItem","item","actions","targetSatllite","nextSatlliteList","map","satllite","satid","selected","onSelectionChange","Meta","avatar","src","satelliteImage","size","alt","title","satname","description","launchDate","POSITION_API_BASE_URL","progressStatus","WorldMap","selectedSatellites","onTracking","useState","duration","setDuration","progressPercentage","setProgressPercentage","progressText","setProgressText","undefined","timerId","setTimerId","markersInfo","setMarkersInfo","currentTimestamp","setCurrentTimestamp","updateMarker","data","index","sat","startLon","positions","satlongitude","startLat","satlatitude","midLon","Math","floor","midLat","lon","lat","info","onClick","Promise","all","id","fetch","then","response","json","fetchPositions","end","Date","timestamp","toString","setInterval","clearInterval","startTracking","catch","background-color","marginLeft","marginRight","defaultValue","percent","format","strokeColor","from","to","textAlign","projectionConfig","scale","height","stroke","strokeWidth","geography","geographies","geo","key","rsmKey","fill","coordinates","r","mark","strokeLinecap","text-anchor","x","Lon","y","ABOVE_API_BASE_URL","Main","setLoading","setSatList","trakcing","setTracking","setObserverInfo","setLocationAvailable","setCurLa","setCurLon","useEffect","navigator","geolocation","getCurrentPosition","position","Number","coords","toFixed","axios","get","res","loc","split","warn","error","nextObserverInfo","above","satellite","filter","Header","Layout","Footer","Content","App","starlinkLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ca9fafc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_logo.13dbd9ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.07c6d561.svg\";","module.exports = __webpack_public_path__ + \"static/media/stars_footer.08dbde37.jpg\";","import Title from \"antd/lib/typography/Title\";\r\nimport React from \"react\";\r\nimport { InputNumber, Form, Button, Checkbox } from \"antd\";\r\n\r\nconst ObserverInfo = (props) => {\r\n  const {curLon, curLa, initialValues, setInitialValues, locationAvailable } = props;\r\n  const onFormFinish = (observerInfo) => {\r\n    observerInfo = {...initialValues}\r\n    props.findSatellitesOnClick(observerInfo);\r\n  }\r\n\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 24 },\r\n  };\r\n\r\n  const tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n  };\r\n  const onChangeHandler = (e, name) => {\r\n    setInitialValues({ ...initialValues, [name]: e })\r\n  }\r\n  const autoFillLocation = (checked) => {\r\n    let curLocation = { \"longitude\": curLon, \"latitude\": curLa };\r\n    if (checked) {\r\n      console.log(curLocation);\r\n    } else {\r\n      curLocation[\"longitude\"] = 0;\r\n      curLocation[\"latitude\"] = 0;\r\n    }\r\n    setInitialValues({ ...initialValues,...curLocation })\r\n  }\r\n\r\n  return (\r\n    <div className=\"observer-info-container\">\r\n      <Title level={5}>Observer Info</Title>\r\n      <Checkbox disabled={!locationAvailable} style={{ margin: \"10px\", color: \"rgb(54, 42, 88)\" }} \r\n        onChange={(e) => autoFillLocation(e.target.checked)} >Use Your Own Location\r\n      </Checkbox>\r\n      <Form\r\n        {...layout}\r\n        initialValues={initialValues}\r\n        onFinish={onFormFinish}\r\n      >\r\n        <Form.Item\r\n          label=\"Longitude\"\r\n          name=\"longitude\"\r\n          rules={[{ \r\n            required: true,\r\n            message: 'Please enter a valid longitude!',\r\n          }]}\r\n        >\r\n          <InputNumber min={-180} max={180} style={{ width: \"40%\" }} disabled={props.disabled} \r\n          value={initialValues.longitude} onChange={(e) => onChangeHandler(e, \"longitude\")}/>\r\n          {true ? null : <Checkbox disabled={true} style={{ marginLeft: \"5px\" }}></Checkbox>}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Latitude\"\r\n          name=\"latitude\"\r\n          rules={[{ \r\n            required: true,\r\n            message: 'Please enter a valid latitude!',\r\n          }]}\r\n        >\r\n          <InputNumber min={-90} max={90} style={{ width: \"40%\" }} disabled={props.disabled} \r\n          value={initialValues.latitude} onChange={(e) => onChangeHandler(e, \"latitude\")}/>\r\n          {true ? null : <Checkbox disabled={true} style={{ marginLeft: \"5px\" }}  ></Checkbox>}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Altitude(meters)\"\r\n          name=\"altitude\"\r\n          rules={[{ \r\n            required: true,\r\n            message: 'Please enter a valid altitude!',\r\n          }]}\r\n        >\r\n          <InputNumber min={-413} max={8850} style={{ width: \"40%\" }} disabled={props.disabled} value={initialValues.altitude} onChange={(e) => onChangeHandler(e, \"altitude\")}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Radius\"\r\n          name=\"radius\"\r\n          rules={[{ \r\n            required: true,\r\n            message: 'Please enter a valid radius!',\r\n          }]}\r\n        >\r\n          <InputNumber min={0} max={90} style={{ width: \"40%\" }} disabled={props.disabled} value={initialValues.radius} onChange={(e) => onChangeHandler(e, \"radius\")}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\" disabled={props.loading || props.disabled}>\r\n            Find nearby satellites\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ObserverInfo;","export const NY20_BASE_URL = \"https://www.n2yo.com/rest/v1/satellite\";\r\n\r\nexport const NY20_API_KEY = \"JBXXF2-JUENNY-TBY4MS-4K0X\";\r\n\r\nexport const SAT_CATEGORY = \"52\";\r\n\r\nexport const COLOR = [\"#108ee8\", \"#40a8f2\", \"#0c66a7\", \"#58b3f3\",\"#0f83d7\", \"#88c8f7\", \"#b7defa\", \"#1192ee\",\"#e7f4fd\"]","import React from \"react\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport { List, Checkbox, Avatar } from \"antd\";\r\nimport satelliteImage from '../images/satellite.svg';\r\n\r\nconst SatelliteList = ({\r\n  satList,\r\n  updateSatelliteList,\r\n  loading,\r\n  disabled\r\n}) => {\r\n  const onSelectionChange = (checked, targetSatllite) => {\r\n    const nextSatlliteList = satList.map((satllite) => {\r\n      if (satllite.satid === targetSatllite.satid) {\r\n        return {\r\n          ...satllite,\r\n          selected: checked\r\n        }\r\n      }\r\n      else {\r\n        return {\r\n          ...satllite\r\n        }\r\n      }\r\n    });\r\n\r\n    updateSatelliteList(nextSatlliteList);\r\n  }\r\n\r\n  return (\r\n    <div className=\"satellite-list-container\">\r\n      <Title level={5}>Nearby Satellites ({satList? satList.length : 0})</Title>\r\n      <p>Select the satellites you wanna track on the world map at the right side</p>\r\n      <hr/>\r\n      <List \r\n        className=\"sat-list\"\r\n        itemLayout=\"horizontal\"\r\n        dataSource={satList}\r\n        loading={loading}\r\n        renderItem={ item => (\r\n            <List.Item \r\n              actions={[<Checkbox onChange={(e) => onSelectionChange(e.target.checked, item)} checked={item.selected} disabled={disabled} />]}>\r\n                <List.Item.Meta\r\n                  avatar={<Avatar src={satelliteImage} size=\"large\" alt=\"satellite\"/>}\r\n                  title={<p>{item.satname}</p>}\r\n                  description={`Launch Date: ${item.launchDate}`}\r\n                />\r\n            </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SatelliteList;","import React, { useState } from \"react\";\r\nimport {\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  Sphere,\r\n  ComposableMap,\r\n  Marker,\r\n  Line\r\n} from \"react-simple-maps\";\r\nimport { Button, InputNumber, Progress } from \"antd\";\r\nimport { NY20_API_KEY, NY20_BASE_URL, COLOR } from \"../constants\";\r\n\r\nexport const POSITION_API_BASE_URL = `${NY20_BASE_URL}/positions`;\r\n\r\nconst progressStatus = {\r\n  Idle: 'Idle',\r\n  Tracking: 'Tracking...',\r\n  Complete: 'Complete'\r\n}\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst WorldMap = ({\r\n  selectedSatellites,\r\n  disabled,\r\n  onTracking,\r\n  observerInfo,\r\n  initialValues\r\n}) => {\r\n  const [duration, setDuration] = useState(1);\r\n  const [progressPercentage, setProgressPercentage] = useState(0);\r\n  const [progressText, setProgressText] = useState(progressStatus.Idle);\r\n  const [timerId, setTimerId] = useState(undefined);\r\n  const [markersInfo, setMarkersInfo] = useState([]);\r\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\r\n\r\n  const abortOnClick = () => {\r\n    if (timerId) {\r\n      clearInterval(timerId);\r\n      setProgressPercentage(0);\r\n      setProgressText(progressStatus.Idle);\r\n      onTracking(false);\r\n      setTimerId(undefined);\r\n    }\r\n  }\r\n\r\n  const fetchPositions = () => {\r\n    const { longitude, latitude, altitude } = observerInfo;\r\n\r\n    return selectedSatellites.map((sat) => {\r\n      const id = sat.satid;\r\n      return fetch(`${POSITION_API_BASE_URL}/${id}/${latitude}/${longitude}/${altitude}/${duration * 60}&apiKey=${NY20_API_KEY}`)\r\n        .then(response => response.json());\r\n    })\r\n  }\r\n\r\n  const updateMarker = (data, index) => {\r\n    setMarkersInfo(data.map((sat) => {\r\n      return {\r\n        startLon: sat.positions[0].satlongitude,\r\n        startLat: sat.positions[0].satlatitude,\r\n        midLon: sat.positions[Math.floor(index / 2)].satlongitude,\r\n        midLat: sat.positions[Math.floor(index / 2)].satlatitude,\r\n        lon: sat.positions[index].satlongitude,\r\n        lat: sat.positions[index].satlatitude,\r\n        name: sat.info.satname,\r\n      };\r\n    }))\r\n  }\r\n\r\n  const startTracking = (data) => {\r\n    let index = 59;\r\n    let end = data[0].positions.length - 1;\r\n    \r\n    setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n    setProgressPercentage((index / end) * 100);\r\n    updateMarker(data, index);\r\n    const timerId =  setInterval(() => {\r\n      index += 60;\r\n      if (index >= end) {\r\n        setProgressText(progressStatus.Complete);\r\n        setProgressPercentage((index / end) * 100);\r\n        setTimerId(undefined);\r\n        onTracking(false);\r\n        clearInterval(timerId);\r\n        return;\r\n      }\r\n      setProgressPercentage((index / end) * 100);\r\n      updateMarker(data, index);\r\n      setCurrentTimestamp(new Date(data[0].positions[index].timestamp * 1000).toString());\r\n\r\n\r\n    }, 1000);\r\n\r\n    return timerId;\r\n  }\r\n\r\n  const trackOnClick = () => {\r\n    setProgressText(progressStatus.Tracking);\r\n    setProgressPercentage(0);\r\n    onTracking(true);\r\n\r\n    Promise.all(fetchPositions()).then((data) => {\r\n      const id = startTracking(data);\r\n      setTimerId(id);\r\n    }).catch(() => {\r\n      console.log(\"error\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"track-info-panel\">\r\n        <Button \r\n          type=\"primary\"\r\n          onClick={trackOnClick}\r\n          disabled={selectedSatellites.length === 0 || disabled}\r\n          background-color = '#108ee9'\r\n\r\n        >\r\n          Track selected satellite(s)\r\n        </Button>\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>for</span>\r\n        <InputNumber \r\n          min={1}\r\n          max={59}\r\n          defaultValue={1}\r\n          onChange={(value) => setDuration(value)}\r\n          disabled={disabled}\r\n        />\r\n        <span style={{ marginLeft: \"10px\", marginRight: \"30px\" }}>minutes (1 ~ 59)</span>\r\n        <Progress \r\n          style={{ width: \"500px\", marginRight: \"150px\" }}\r\n          percent={progressPercentage} \r\n          format={() => progressText} \r\n          strokeColor={{\r\n            from: '#108ee9',\r\n            to: '#87d068',\r\n          }}\r\n        />\r\n        {timerId &&\r\n          <Button \r\n            type=\"primary\"\r\n            onClick={abortOnClick}\r\n          >\r\n            Abort\r\n          </Button>\r\n        }\r\n      </div>\r\n      <div className=\"time-stamp-container\" style={{textAlign: \"center\"}}>\r\n        <b>{currentTimestamp}</b>\r\n      </div>\r\n      <ComposableMap projectionConfig={{ scale: 140 }} height = {480} style={{ width: \"95%\", marginLeft: \"10px\" }}>\r\n        <Graticule stroke= \"#FFB6C1\" strokeWidth={0.5} />\r\n        <Sphere stroke=\"#FFB6C1\" strokeWidth={0.5} />\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                fill=\"#c0d6e4\"\r\n                stroke=\"#FFF\"\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n        {\r\n          initialValues.longitude && initialValues.latitude ? \r\n          <Marker coordinates={[initialValues.longitude, initialValues.latitude]}>\r\n            <circle r={3} fill=\"#F53\" />\r\n            <text>Observer</text>\r\n          </Marker> : null\r\n        }\r\n        {\r\n          markersInfo.map((mark, index) =>\r\n            <Line\r\n                coordinates={[[mark.startLon, mark.startLat], [mark.midLon, mark.midLat], [mark.lon, mark.lat]]}\r\n                stroke={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]}\r\n                strokeWidth={2}\r\n                strokeLinecap=\"round\"\r\n            />\r\n          )\r\n        }\r\n        {\r\n           markersInfo.map((mark, index) =>\r\n           <Marker coordinates={[mark.lon, mark.lat]}>\r\n               <circle r={4} fill={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]} />\r\n               <text text-anchor=\"middle\"\r\n                   x={mark.Lon > mark.startLon ? \"10\" : \"20\"} y=\"20\" fill=\"#0c66a7\">{mark.name}</text>\r\n           </Marker>\r\n          )\r\n        }\r\n        {\r\n          markersInfo.map((mark, index) =>\r\n          <Marker coordinates={[mark.startLon, mark.startLat]}>\r\n              <circle r={3} fill={index < COLOR.length ? COLOR[index] : COLOR[COLOR.length - 1]} />\r\n          </Marker>\r\n          )\r\n        }\r\n      </ComposableMap>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WorldMap;","import React, { useState , useEffect} from \"react\";\r\nimport { Col, Row } from \"antd\";\r\nimport ObserverInfo from \"./ObserverInfo\";\r\nimport { SAT_CATEGORY, NY20_API_KEY, NY20_BASE_URL } from \"../constants\";\r\nimport SatelliteList from \"./SatelliteList\";\r\nimport WorldMap from \"./WorldMap\";\r\nimport axios from 'axios';\r\n\r\nexport const ABOVE_API_BASE_URL = `${NY20_BASE_URL}/above`;\r\n\r\nconst Main = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [satList, setSatList] = useState([]);\r\n  const [trakcing, setTracking] = useState(false);\r\n  const [observerInfo, setObserverInfo] = useState({});\r\n  const [locationAvailable, setLocationAvailable] = useState(false);\r\n  const [curLa, setCurLa] = useState({});\r\n  const [curLon, setCurLon] = useState({});\r\n  const [initialValues, setInitialValues] = useState({\r\n    longitude: 0,\r\n    latitude: 0,\r\n    altitude: 0,\r\n    radius: 0\r\n  })\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      console.log(\"Available\");\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        setCurLa(Number((position.coords.latitude).toFixed(6)));\r\n        setCurLon(Number((position.coords.longitude).toFixed(6)));\r\n        setLocationAvailable(true);\r\n      });\r\n    } else {\r\n      axios.get('http://ipinfo.io/json', null)\r\n        .then(res => {\r\n          if ('loc' in res) {\r\n            let loc = res.loc.split(',');\r\n            setCurLa(Number((loc[0]).toFixed(2)));\r\n            setCurLon(Number((loc[1]).toFixed(2)));\r\n            setLocationAvailable(true);\r\n          } else {\r\n            console.warn('Getting location by IP failed.');\r\n          }\r\n        })\r\n        .catch(res=> console.log(res.error))\r\n    }\r\n  }, [])\r\n\r\n  const findSatellitesOnClick = (nextObserverInfo) => {\r\n    setObserverInfo(nextObserverInfo);\r\n    const { longitude, latitude, altitude, radius } = nextObserverInfo;\r\n\r\n    setLoading(true);\r\n    fetch(`${ABOVE_API_BASE_URL}/${latitude}/${longitude}/${altitude}/${radius}/${SAT_CATEGORY}&apiKey=${NY20_API_KEY}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setSatList(data.above.map((satellite) => {\r\n          return {\r\n            ...satellite,\r\n            selected: false,\r\n          }\r\n        }));\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={8}>\r\n        <ObserverInfo \r\n          findSatellitesOnClick={findSatellitesOnClick}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n          initialValues={initialValues}\r\n          setInitialValues={setInitialValues}\r\n          locationAvailable={locationAvailable}\r\n          curLa={curLa}\r\n          curLon={curLon}\r\n        />\r\n        <SatelliteList \r\n          satList={satList}\r\n          updateSatelliteList={setSatList}\r\n          loading={loading}\r\n          disabled={trakcing}\r\n        />\r\n      </Col>\r\n      <Col span={16}>\r\n        <WorldMap \r\n          selectedSatellites={satList.filter(sat => sat.selected)}\r\n          onTracking={setTracking}\r\n          disabled={trakcing}\r\n          observerInfo={observerInfo}\r\n          initialValues={initialValues}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Main;","\nimport React from 'react';\nimport starlinkLogo from './images/starlink_logo.svg';\nimport footbackground from './images/stars_footer.jpg';\nimport { Layout } from 'antd';\nimport Main from './components/Main';\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header>\n        <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"title\">\n          StarLink Tracker\n        </p>\n      </Header>\n      <Content>\n        <Main />\n      </Content>\n      <Footer >\n        <span className = \"annotation\">@2020 StarLink Tracker. All Rights Reserved. Website Made by Shize Li</span>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}